ratings
summary(ratings)
#Movies dataset
movies1 <- read_csv("movies.csv")
glimpse(movies1)
movies1
# Splitting title column to titles and year
movies <- movies1 %>%
tidyr::extract(title, c("titles", "year"), regex = "^(.*) \\(([0-9 \\-]*)\\)$", remove = F) %>%
mutate(year = as.integer(year)) %>%
select(-title)
movies
# Tags dataset
tags <- read_csv("tags.csv")
glimpse(tags)
# Converting Timestamp column
tags <- tags %>%
mutate(timestamp = as_datetime(timestamp))
tags
summary(tags)
#Combining ratings and movies dataset
movielens <- merge(ratings,movies,by=c("movieId"))
summary(movielens)
head(movielens,10)
movielens %>%
summarize(n_users = n_distinct(userId),
n_movies = n_distinct(movieId))
#Count for each genre by movies
top_genre_movies <- movies %>%
separate_rows(genres, sep = "\\|") %>%
group_by(genres) %>%
summarise(movies_count = n()) %>%
arrange(desc(movies_count))
kable(head(top_genre_movies,10)) %>%
kable_styling(bootstrap_options = "bordered", full_width = F , position ="center")
#Count for each genre by ratings
top_genre_ratings <- movielens %>%
separate_rows(genres, sep = "\\|") %>%
group_by(genres) %>%
summarize(ratings_count = n()) %>%
arrange(desc(ratings_count))
kable(head(top_genre_ratings,10)) %>%
kable_styling(bootstrap_options = "bordered", full_width = F , position ="center")
head(top_genre_ratings,10) %>%
ggplot(aes(x=reorder(genres, ratings_count), y=ratings_count)) +
geom_bar(stat='identity', fill="seagreen") + coord_flip(y=c(9000, 42000)) +
labs(x="genres", y="Number of ratings") +
geom_text(aes(label= ratings_count), hjust=-0.1, size=3) +
labs(title="Top 10 genres with most ratings")
top_genre_year <- movies %>%
select(movieId, year, genres) %>%
separate_rows(genres, sep = "\\|") %>%
group_by(year, genres) %>%
summarise(count=n())
kable(head(top_genre_year,10)) %>%
kable_styling(bootstrap_options = "bordered", full_width = F , position ="center")
get_genre <- function(titlex){
movies %>%
select(titles,genres) %>%
group_by(genres,titles) %>%
filter(titles==titlex)
}
get_genre('Jumanji')
#for popular genres by ratings
wordcloud(top_genre_ratings$genres,top_genre_ratings$ratings_count,min.freq=50,max.words = 20,random.order=FALSE,random.color=FALSE, rot.per=0.35,colors = brewer.pal(8,"Dark2"),scale=c(4,.2),font=1)
# Groupings tags for each genres
genres_tags <- movies %>%
na.omit() %>%
select(movieId, genres) %>%
separate_rows(genres, sep = "\\|") %>%
inner_join(tags, by = "movieId") %>%
select(genres, tag) %>%
group_by(genres) %>%
nest()
# Groupings tags for each genres
genres_tags <- movies %>%
na.omit() %>%
select(movieId, genres) %>%
separate_rows(genres, sep = "\\|") %>%
inner_join(tags, by = "movieId") %>%
select(genres, tag) %>%
group_by(genres) %>%
nest()
#Wordcloud for a genre
genre <-"Comedy"
top_genre_tags <- genres_tags %>%
filter(genres == genre) %>%
unnest() %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
wordcloud(top_genre_tags$tag, top_genre_tags$n, max.words = 50, color=brewer.pal(8, "Dark2"))
#Top 20 movies with most number of ratings
top_title <- movielens %>%
group_by(titles) %>%
summarize(count=n()) %>%
top_n(20,count) %>%
arrange(desc(count))
kable(head(top_title,10)) %>%
kable_styling(bootstrap_options = "bordered", full_width = F , position ="center")
top_title1 <- head(top_title,5)
df <- movielens %>%
filter(titles== top_title1$titles) %>%
mutate(category = case_when(rating %in% c(0.5,1) ~ "Very bad",rating %in% c(1.5,2) ~ "Bad",rating %in% c(2.5,3) ~ "Average",rating %in% c(3.5,4) ~ "Good",rating %in% c(4.5,5) ~ "Very good"))
df$category <- factor(df$category, levels = unique(df$category))
ggplot(df)+
geom_bar(mapping= aes(x=titles,fill=category),position="dodge",width=0.6)+
theme(axis.text.x = element_text(angle = 15))
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill="Dark2") + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill=brewer.pal(8,"Dark2") + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill=brewer.pal(8,"Dark2")) + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill=brewer.pal(10,"Dark2")) + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill=brewer.pal(1,"Dark2")) + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill=brewer.pal("Dark2")) + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill="light green") + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill="blue") + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill="light purple") + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill="purple") + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill="brown") + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
##Wordcloud for top 20 titles with most ratings
wordcloud(top_title$titles, top_title$count,min.freq=150,max.words = 20,random.order=FALSE,random.color=FALSE,rot.per=0.25,colors = brewer.pal(8,"Dark2"),scale=c(1,.6),font=1)
get_movies <- function(year1){
movies %>%
select(titles,year) %>%
group_by(year,titles) %>%
filter(year==year1)
}
get_movies(1995)
groups <-  movielens %>%
select(rating) %>%
mutate(category = case_when(rating %in% c(0.5,1) ~ "Very bad",rating %in% c(1.5,2) ~ "Bad",rating %in% c(2.5,3) ~ "Average",rating %in% c(3.5,4) ~ "Good",rating %in% c(4.5,5) ~ "Very good"))
ggplot(groups, aes(x= rating, fill = category)) +
geom_histogram( binwidth = 0.2) +
scale_x_continuous(breaks=seq(0, 5, by= 0.5)) +
labs(x="rating", y="number of ratings") +
ggtitle("Count for each rating")
# Boxplots for top 10 genres with most number of ratings
top_genre10=head(top_genre_ratings,10)
movielens %>%
filter(genres==top_genre5$genres) %>%
ggplot( aes(x=genres, y=rating, fill=genres)) +
geom_boxplot() +
theme(legend.position="none")
#Average rating for a movie
avg_rating <- movielens %>%
na.omit() %>%
select(movieId, titles, rating) %>%
group_by(movieId,titles) %>%
summarise(count = n(), mean = mean(rating), min = min(rating), max = max(rating)) %>%
arrange(desc(count))
avg_rating
# histogram of number of ratings by movieId
movielens %>%
count(movieId) %>%
ggplot(aes(n)) +
geom_histogram( bins=30, fill = "brown",color="black") +
scale_x_log10() +
labs(subtitle  ="Number of ratings by movieId",
x="movieId" ,
y="number of ratings")
# histogram of number of ratings by userId
movielens %>%
count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins=40, color=ligh) +
labs(subtitle ="Number of ratings by UserId",
x="userId" ,
y="number of ratings") +
scale_x_log10()
# histogram of number of ratings by userId
movielens %>%
count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins=40, color="seagreen) +
labs(subtitle ="Number of ratings by UserId",
# histogram of number of ratings by userId
movielens %>%
count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins=40, color="seagreen") +
labs(subtitle ="Number of ratings by UserId",
x="userId" ,
y="number of ratings") +
scale_x_log10()
# histogram of number of ratings by movieId
movielens %>%
count(movieId) %>%
ggplot(aes(n)) +
geom_histogram( bins=30, color = "brown") +
scale_x_log10() +
labs(subtitle  ="Number of ratings by movieId",
x="movieId" ,
y="number of ratings")
# histogram of number of ratings by movieId
movielens %>%
count(movieId) %>%
ggplot(aes(n)) +
geom_histogram( bins=30, fill = "light brown") +
scale_x_log10() +
labs(subtitle  ="Number of ratings by movieId",
x="movieId" ,
y="number of ratings")
# histogram of number of ratings by movieId
movielens %>%
count(movieId) %>%
ggplot(aes(n)) +
geom_histogram( bins=30, fill = "brown") +
scale_x_log10() +
labs(subtitle  ="Number of ratings by movieId",
x="movieId" ,
y="number of ratings")
# histogram of number of ratings by userId
movielens %>%
count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins=40, fill="seagreen") +
labs(subtitle ="Number of ratings by UserId",
x="userId" ,
y="number of ratings") +
scale_x_log10()
# histogram of number of ratings by movieId
movielens %>%
count(movieId) %>%
ggplot(aes(n)) +
geom_histogram( bins=30, fill = "brown",color="black") +
scale_x_log10() +
labs(subtitle  ="Number of ratings by movieId",
x="movieId" ,
y="number of ratings")
# histogram of number of ratings by userId
movielens %>%
count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins=40, fill="brown",color="black") +
labs(subtitle ="Number of ratings by UserId",
x="userId" ,
y="number of ratings") +
scale_x_log10()
head(top_genre_ratings,10) %>%
ggplot(aes(x=reorder(genres, ratings_count), y=ratings_count)) +
geom_bar(stat='identity', fill="brown") + coord_flip(y=c(9000, 42000)) +
labs(x="genres", y="Number of ratings") +
geom_text(aes(label= ratings_count), hjust=-0.1, size=3) +
labs(title="Top 10 genres with most ratings")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(readr)
library(dplyr)
library(magrittr)
library(lubridate)
library(ggplot2)
library(rvest)
library(kableExtra)
library(caret)
library(DT)
library(wordcloud)
library(wordcloud2)
library(ggthemes)
library(RColorBrewer)
library(stringr)
library(XML)
library(tidytext)
library(doMC)
library(shiny)
url = read_html("https://www.comparitech.com/tv-streaming/netflix-subscribers/")
node=url %>%
html_nodes(xpath='//*[@id="tablepress-475-no-2"]') %>%
html_table(header = TRUE, fill = TRUE)
node=as.data.frame(node)
netflix= node %>%
rename(
Subscriber_count_18=X..of.Subscribers..2018.,
Avg_Monthly_Revenue_18=Average.Monthly.Revenue.per.Paying.Membership,
Total_Yearly_Revenue_18=Total.Yearly.Revenue.from.Paid.Memberships..2018.,
Subscriber_count_june19=X..of.Subscribers..June.19.,
Total_Revenue_june19=Total.from.Paid.Memberships..First.Half.of.2019.,
Subscriber_count_dec19=X..of.Subscribers..Dec.19.,
Total_Revenue_dec19=Total.from.Paid.Memberships..Second.Half.of.2019.,
Total_Yearly_Revenue_19=Total.Estimated.Revenue.by.End.of.2019)
netflix
netflix %>%
mutate_all(type.convert) %>%
mutate_if(is.character,as.integer)
# Ratings dataset
ratings <- read_csv("ratings.csv")
glimpse(ratings)
# Converting Timestamp column
ratings <- ratings %>%
mutate(timestamp = as_datetime(timestamp))
ratings
summary(ratings)
#Movies dataset
movies1 <- read_csv("movies.csv")
glimpse(movies1)
movies1
# Splitting title column to titles and year
movies <- movies1 %>%
tidyr::extract(title, c("titles", "year"), regex = "^(.*) \\(([0-9 \\-]*)\\)$", remove = F) %>%
mutate(year = as.integer(year)) %>%
select(-title)
movies
# Tags dataset
tags <- read_csv("tags.csv")
glimpse(tags)
# Converting Timestamp column
tags <- tags %>%
mutate(timestamp = as_datetime(timestamp))
tags
summary(tags)
#Combining ratings and movies dataset
movielens <- merge(ratings,movies,by=c("movieId"))
summary(movielens)
head(movielens,10)
movielens %>%
summarize(n_users = n_distinct(userId),
n_movies = n_distinct(movieId))
#Count for each genre by movies
top_genre_movies <- movies %>%
separate_rows(genres, sep = "\\|") %>%
group_by(genres) %>%
summarise(movies_count = n()) %>%
arrange(desc(movies_count))
kable(head(top_genre_movies,10)) %>%
kable_styling(bootstrap_options = "bordered", full_width = F , position ="center")
#Count for each genre by ratings
top_genre_ratings <- movielens %>%
separate_rows(genres, sep = "\\|") %>%
group_by(genres) %>%
summarize(ratings_count = n()) %>%
arrange(desc(ratings_count))
kable(head(top_genre_ratings,10)) %>%
kable_styling(bootstrap_options = "bordered", full_width = F , position ="center")
head(top_genre_ratings,10) %>%
ggplot(aes(x=reorder(genres, ratings_count), y=ratings_count)) +
geom_bar(stat='identity', fill="brown") + coord_flip(y=c(9000, 42000)) +
labs(x="genres", y="Number of ratings") +
geom_text(aes(label= ratings_count), hjust=-0.1, size=3) +
labs(title="Top 10 genres with most ratings")
top_genre_year <- movies %>%
select(movieId, year, genres) %>%
separate_rows(genres, sep = "\\|") %>%
group_by(year, genres) %>%
summarise(count=n())
kable(head(top_genre_year,10)) %>%
kable_styling(bootstrap_options = "bordered", full_width = F , position ="center")
get_genre <- function(titlex){
movies %>%
select(titles,genres) %>%
group_by(genres,titles) %>%
filter(titles==titlex)
}
get_genre('Jumanji')
#for popular genres by ratings
wordcloud(top_genre_ratings$genres,top_genre_ratings$ratings_count,min.freq=50,max.words = 20,random.order=FALSE,random.color=FALSE, rot.per=0.35,colors = brewer.pal(8,"Dark2"),scale=c(4,.2),font=1)
# Groupings tags for each genres
genres_tags <- movies %>%
na.omit() %>%
select(movieId, genres) %>%
separate_rows(genres, sep = "\\|") %>%
inner_join(tags, by = "movieId") %>%
select(genres, tag) %>%
group_by(genres) %>%
nest()
#Wordcloud for a genre
genre <-"Comedy"
top_genre_tags <- genres_tags %>%
filter(genres == genre) %>%
unnest() %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
wordcloud(top_genre_tags$tag, top_genre_tags$n, max.words = 50, color=brewer.pal(8, "Dark2"))
#Top 20 movies with most number of ratings
top_title <- movielens %>%
group_by(titles) %>%
summarize(count=n()) %>%
top_n(20,count) %>%
arrange(desc(count))
kable(head(top_title,10)) %>%
kable_styling(bootstrap_options = "bordered", full_width = F , position ="center")
top_title1 <- head(top_title,5)
df <- movielens %>%
filter(titles== top_title1$titles) %>%
mutate(category = case_when(rating %in% c(0.5,1) ~ "Very bad",rating %in% c(1.5,2) ~ "Bad",rating %in% c(2.5,3) ~ "Average",rating %in% c(3.5,4) ~ "Good",rating %in% c(4.5,5) ~ "Very good"))
df$category <- factor(df$category, levels = unique(df$category))
ggplot(df)+
geom_bar(mapping= aes(x=titles,fill=category),position="dodge",width=0.6)+
theme(axis.text.x = element_text(angle = 15))
#Plotting the titles against the number of ratings
head(top_title,10) %>%
ggplot(aes(x=reorder(titles, count), y=count)) +
geom_bar(stat='identity', fill="brown") + coord_flip(y=c(0, 400)) +
labs(x="Movies", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies with most ratings")
##Wordcloud for top 20 titles with most ratings
wordcloud(top_title$titles, top_title$count,min.freq=150,max.words = 20,random.order=FALSE,random.color=FALSE,rot.per=0.25,colors = brewer.pal(8,"Dark2"),scale=c(1,.6),font=1)
get_movies <- function(year1){
movies %>%
select(titles,year) %>%
group_by(year,titles) %>%
filter(year==year1)
}
get_movies(1995)
groups <-  movielens %>%
select(rating) %>%
mutate(category = case_when(rating %in% c(0.5,1) ~ "Very bad",rating %in% c(1.5,2) ~ "Bad",rating %in% c(2.5,3) ~ "Average",rating %in% c(3.5,4) ~ "Good",rating %in% c(4.5,5) ~ "Very good"))
ggplot(groups, aes(x= rating, fill = category)) +
geom_histogram( binwidth = 0.2) +
scale_x_continuous(breaks=seq(0, 5, by= 0.5)) +
labs(x="rating", y="number of ratings") +
ggtitle("Count for each rating")
# Boxplots for top 10 genres with most number of ratings
top_genre10=head(top_genre_ratings,10)
movielens %>%
filter(genres==top_genre5$genres) %>%
ggplot( aes(x=genres, y=rating, fill=genres)) +
geom_boxplot() +
theme(legend.position="none")
#Average rating for a movie
avg_rating <- movielens %>%
na.omit() %>%
select(movieId, titles, rating) %>%
group_by(movieId,titles) %>%
summarise(count = n(), mean = mean(rating), min = min(rating), max = max(rating)) %>%
arrange(desc(count))
avg_rating
# histogram of number of ratings by movieId
movielens %>%
count(movieId) %>%
ggplot(aes(n)) +
geom_histogram( bins=30, fill = "brown",color="black") +
scale_x_log10() +
labs(subtitle  ="Number of ratings by movieId",
x="movieId" ,
y="number of ratings")
# histogram of number of ratings by userId
movielens %>%
count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins=40, fill="brown",color="black") +
labs(subtitle ="Number of ratings by UserId",
x="userId" ,
y="number of ratings") +
scale_x_log10()
